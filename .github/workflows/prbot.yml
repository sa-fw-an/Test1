name: PR Status Bot

on:
  workflow_run:
    workflows: ["Continuous Integration", "Linting"]
    types:
      - completed

jobs:
  pr-status-check:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow was from a pull request
    if: github.event.workflow_run.event == 'pull_request'
    permissions:
      pull-requests: write
      actions: read
      contents: read
    
    steps:
      - name: Get PR number
        id: get-pr
        run: |
          PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
            --jq '.pull_requests[0].number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check workflow statuses
        id: check-status
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          
          if [ "$PR_NUMBER" == "null" ] || [ -z "$PR_NUMBER" ]; then
            echo "No PR found for this workflow run"
            exit 0
          fi
          
          # Get the PR head SHA
          PR_HEAD_SHA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')
          
          # Wait a bit for other workflows to complete
          sleep 30
          
          # Check status of both required workflows
          CI_STATUS=$(gh api repos/${{ github.repository }}/actions/runs \
            --field head_sha=$PR_HEAD_SHA \
            --field event=pull_request \
            --jq '.workflow_runs[] | select(.name == "Continuous Integration" and .status == "completed") | .conclusion' | head -1)
          
          LINT_STATUS=$(gh api repos/${{ github.repository }}/actions/runs \
            --field head_sha=$PR_HEAD_SHA \
            --field event=pull_request \
            --jq '.workflow_runs[] | select(.name == "Linting" and .status == "completed") | .conclusion' | head -1)
          
          echo "ci_status=$CI_STATUS" >> $GITHUB_OUTPUT
          echo "lint_status=$LINT_STATUS" >> $GITHUB_OUTPUT
          
          # Check if both workflows completed
          if [ -n "$CI_STATUS" ] && [ -n "$LINT_STATUS" ]; then
            echo "both_completed=true" >> $GITHUB_OUTPUT
            if [ "$CI_STATUS" == "success" ] && [ "$LINT_STATUS" == "success" ]; then
              echo "all_passed=true" >> $GITHUB_OUTPUT
            else
              echo "all_passed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "both_completed=false" >> $GITHUB_OUTPUT
            echo "all_passed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR - Success
        if: steps.check-status.outputs.both_completed == 'true' && steps.check-status.outputs.all_passed == 'true'
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          
          # Check if we already commented with success
          EXISTING_COMMENT=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.body | contains("üéâ All checks passed!")) | .id' | head -1)
          
          cat << 'EOF' > success_message.txt
          üéâ **All checks passed!**
          
          Your PR is ready to merge! ‚úÖ
          
          **Completed workflows:**
          - ‚úÖ Continuous Integration (Build successful)
          - ‚úÖ Linting (Code formatting and style checks passed)
          
          This PR can now be safely merged to `main` branch.
          EOF
          
          SUCCESS_MESSAGE=$(cat success_message.txt)
          
          if [ -n "$EXISTING_COMMENT" ]; then
            gh api repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT \
              -X PATCH \
              -f body="$SUCCESS_MESSAGE"
          else
            gh pr comment $PR_NUMBER --body "$SUCCESS_MESSAGE"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR - Failures
        if: steps.check-status.outputs.both_completed == 'true' && steps.check-status.outputs.all_passed == 'false'
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          CI_STATUS=${{ steps.check-status.outputs.ci_status }}
          LINT_STATUS=${{ steps.check-status.outputs.lint_status }}
          
          # Check if we already commented with failures
          EXISTING_COMMENT=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.body | contains("‚ùå Some checks failed")) | .id' | head -1)
          
          cat << 'EOF' > failure_message.txt
          ‚ùå **Some checks failed**
          
          Please fix the following issues before merging:
          
          EOF
          
          if [ "$CI_STATUS" != "success" ]; then
            cat << 'EOF' >> failure_message.txt
          **üî® Continuous Integration Failed:**
          The build process failed. Please fix the issue and run `npm run build` locally before making a PR to ensure your changes compile correctly.
          
          EOF
          fi
          
          if [ "$LINT_STATUS" != "success" ]; then
            cat << 'EOF' >> failure_message.txt
          **üìù Linting Failed:**
          Code formatting or style issues detected. To fix:
          - **For Unix/macOS:** Run `npm run format`
          - **For Windows:** Run `npm run format <filename>` for specific files
          - **For reference:** See PR #12 for more details on formatting guidelines
          
          EOF
          fi
          
          cat << 'EOF' >> failure_message.txt
          **Next steps:**
          1. Fix the issues mentioned above
          2. Test your changes locally
          3. Push your fixes to this branch
          4. Wait for the workflows to run again
          
          The bot will update this comment once all checks pass! ü§ñ
          EOF
          
          FAILURE_MESSAGE=$(cat failure_message.txt)
          
          if [ -n "$EXISTING_COMMENT" ]; then
            gh api repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT \
              -X PATCH \
              -f body="$FAILURE_MESSAGE"
          else
            gh pr comment $PR_NUMBER --body "$FAILURE_MESSAGE"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR - Still Running
        if: steps.check-status.outputs.both_completed == 'false'
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          CI_STATUS=${{ steps.check-status.outputs.ci_status }}
          LINT_STATUS=${{ steps.check-status.outputs.lint_status }}
          
          # Check if we already commented about pending workflows
          EXISTING_COMMENT=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.body | contains("‚è≥ Workflows are still running")) | .id' | head -1)
          
          cat << 'EOF' > pending_message.txt
          ‚è≥ **Workflows are still running...**
          
          Please wait for all checks to complete:
          
          EOF
          
          if [ -n "$CI_STATUS" ]; then
            if [ "$CI_STATUS" == "success" ]; then
              echo "- ‚úÖ Continuous Integration (Completed)" >> pending_message.txt
            else
              echo "- ‚ùå Continuous Integration (Failed)" >> pending_message.txt
            fi
          else
            echo "- ‚è≥ Continuous Integration (Running...)" >> pending_message.txt
          fi
          
          if [ -n "$LINT_STATUS" ]; then
            if [ "$LINT_STATUS" == "success" ]; then
              echo "- ‚úÖ Linting (Completed)" >> pending_message.txt
            else
              echo "- ‚ùå Linting (Failed)" >> pending_message.txt
            fi
          else
            echo "- ‚è≥ Linting (Running...)" >> pending_message.txt
          fi
          
          echo "" >> pending_message.txt
          echo "This comment will be updated once all workflows complete." >> pending_message.txt
          
          PENDING_MESSAGE=$(cat pending_message.txt)
          
          if [ -n "$EXISTING_COMMENT" ]; then
            gh api repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT \
              -X PATCH \
              -f body="$PENDING_MESSAGE"
          else
            gh pr comment $PR_NUMBER --body "$PENDING_MESSAGE"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
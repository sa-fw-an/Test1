name: PR Status Bot

on:
  pull_request_target:
    types:
      - opened
      - synchronize

jobs:
  check-pr-status:
    name: Check PR Workflows
    runs-on: ubuntu-latest
    permissions: 
      pull-requests: write
      contents: read
      issues: write
      actions: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: npm install

      - name: Run Build Test (CI Check)
        id: ci-check
        run: |
          if npm run build; then
            echo "CI_PASSED=true" >> $GITHUB_ENV
            echo "CI_ERROR=" >> $GITHUB_ENV
          else
            echo "CI_PASSED=false" >> $GITHUB_ENV
            echo "CI_ERROR=Build failed" >> $GITHUB_ENV
          fi

      - name: Run Linting Checks
        id: lint-check
        run: |
          LINT_ERRORS=""
          LINT_PASSED=true
          
          # Run TypeScript linting
          if ! npm run lint:ts; then
            LINT_PASSED=false
            LINT_ERRORS="${LINT_ERRORS}TypeScript linting failed\n"
          fi
          
          # Run Markdown linting
          if ! npm run lint:md; then
            LINT_PASSED=false
            LINT_ERRORS="${LINT_ERRORS}Markdown linting failed\n"
          fi
          
          # Check code formatting with Prettier
          if ! npm run format:check; then
            LINT_PASSED=false
            LINT_ERRORS="${LINT_ERRORS}Code formatting issues detected\n"
          fi
          
          echo "LINT_PASSED=$LINT_PASSED" >> $GITHUB_ENV
          echo "LINT_ERRORS<<EOF" >> $GITHUB_ENV
          echo -e "$LINT_ERRORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate PR Comment
        id: generate-comment
        run: |
          # Extract PR number
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          
          # Generate a temporary file for the comment
          COMMENT_FILE=$(mktemp)
          
          # Save variables to GITHUB_OUTPUT
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "COMMENT_FILE=$COMMENT_FILE" >> $GITHUB_OUTPUT
          
          # Generate content for the comment file
          {
            if [ "$CI_PASSED" = "true" ] && [ "$LINT_PASSED" = "true" ]; then
              echo "üéâ **All checks passed!**"
              echo ""
              echo "Your PR is ready to merge! ‚úÖ"
              echo ""
              echo "**Completed workflows:**"
              echo "- ‚úÖ Continuous Integration (Build successful)"
              echo "- ‚úÖ Linting (Code formatting and style checks passed)"
              echo ""
              echo "This PR can now be safely merged to \`main\` branch."
            else
              echo "‚ùå **Some checks failed**"
              echo ""
              echo "Please fix the following issues before merging:"
              echo ""
              
              if [ "$CI_PASSED" = "false" ]; then
                echo "**üî® Continuous Integration Failed:**"
                echo "The build process failed. Please fix the issue and run \`npm run build\` locally before making a PR to ensure your changes compile correctly."
                echo ""
              fi
              
              if [ "$LINT_PASSED" = "false" ]; then
                echo "**üìù Linting Failed:**"
                echo "Code formatting or style issues detected. To fix:"
                echo "- **For Unix/macOS:** Run \`npm run format\`"
                echo "- **For Windows:** Run \`npm run format <filename>\` for specific files"
                echo "- **For reference:** See PR #12 for more details on formatting guidelines"
                echo ""
                if [ -n "$LINT_ERRORS" ]; then
                  echo "**Specific issues:**"
                  echo '```'
                  echo -e "$LINT_ERRORS"
                  echo '```'
                  echo ""
                fi
              fi
              
              echo "**Next steps:**"
              echo "1. Fix the issues mentioned above"
              echo "2. Test your changes locally"
              echo "3. Push your fixes to this branch"
              echo "4. The bot will automatically re-check when you push new commits"
              echo ""
              echo "The bot will update this comment once all checks pass! ü§ñ"
            fi
          } > "$COMMENT_FILE"

      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v3
        with:
          file-path: ${{ steps.generate-comment.outputs.COMMENT_FILE }}
          pr-number: ${{ steps.generate-comment.outputs.PR_NUMBER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}